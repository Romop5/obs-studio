/*****************************************************************************
Copyright (C) 2016 by c3r1c3 <c3r1c3@nevermindonline.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float strength;
uniform float4x4 kernel_matrix;

uniform float width_param;
uniform float height_param;
uniform float4x4 matrix_0;
uniform float4x4 matrix_1;
uniform float4x4 matrix_2;
uniform float4x4 matrix_3;


sampler_state textureSampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

float getMatrix(int row, int col)
{
    int r = row%4;
    int c = col%4;
    if(row < 4)
    {
        if(col < 4)
            return matrix_0[r][c];
        return matrix_1[r][c];
    }
    if(col < 4)
        return matrix_2[r][c];
    return matrix_3[r][c];
}

float4 PSColorFilterRGBA(VertData vert_in) : TARGET
{
    float wSize = 1.0/width_param;
    float hSize = 1.0/height_param;

	//float4 pixelSum = (image.Sample(textureSampler, vert_in.uv));
	float4 pixelSum = float4(0.0);
	//float4 pixelSum = (image.Sample(textureSampler, vert_in.uv+float2(-hSize, -wSize)) + 
    //                  image.Sample(textureSampler, vert_in.uv+float2(hSize, -wSize)) + 
    //                  image.Sample(textureSampler, vert_in.uv+float2(-hSize, wSize)) +
    //                  image.Sample(textureSampler, vert_in.uv+float2(hSize, wSize)))/4.0;

   
    float a = getMatrix(0,4); 

   // float4 pixelSum = float4(1);
    
    float weightSum = 0.0;
    for(int i = -3; i <= 3; i++)
    {
        for(int j = -3; j <= 3; j++)
        {
            float sample = getMatrix(i+3, j+3); 
            weightSum += sample;
            pixelSum += image.Sample(textureSampler, vert_in.uv+float2(hSize*j, wSize*i))*sample;
        }

    }
    
    //pixelSum = pixelSum / 25.0;
    pixelSum = pixelSum / weightSum; 
	return pixelSum;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSColorFilterRGBA(vert_in);
	}
}
