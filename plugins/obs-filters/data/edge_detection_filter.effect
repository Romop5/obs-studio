/*****************************************************************************
Copyright (C) 2016 by c3r1c3 <c3r1c3@nevermindonline.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

#define INTERVAL_SIZE 1

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float threshold;
uniform float width_param;
uniform float height_param;

uniform float4x4 sobel_horizontal;
uniform float4x4 sobel_vertical;

sampler_state textureSampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

float intensity(float4 inputVal)
{
    return inputVal.x*0.299+inputVal.y*0.587+inputVal.z*0.114; 
}

float4 PSColorFilterRGBA(VertData vert_in) : TARGET
{
    float wSize = 1.0/width_param;
    float hSize = 1.0/height_param;

    float sum = 0.0;
    float4 horizontalSum = float4(0.0);
    float4 verticalSum = float4(0.0);
    for(int i = -INTERVAL_SIZE; i <= INTERVAL_SIZE; i++)
    {
        for(int j = -INTERVAL_SIZE; j <= INTERVAL_SIZE; j++)
        {
            verticalSum += image.Sample(textureSampler, vert_in.uv+float2(hSize*j, wSize*i))*sobel_vertical[i+1][j+1];
            horizontalSum += image.Sample(textureSampler, vert_in.uv+float2(hSize*j, wSize*i))*sobel_horizontal[i+1][j+1];
        }

    }
    float result = sqrt(pow(intensity(verticalSum),2) + pow(intensity(horizontalSum),2));

    result = step(threshold,result)*result;
    //result = max(threshold, result);
    
	return float4(result,result, result,1.0);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSColorFilterRGBA(vert_in);
	}
}
